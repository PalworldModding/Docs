"use strict";(self.webpackChunkpalworld_docs=self.webpackChunkpalworld_docs||[]).push([[3426],{10391:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var t=a(85893),i=a(11151);const l={sidebar_position:10},s="Lua Basics",r={id:"lua-modding/lua-basics",title:"Lua Basics",description:"LUA is a lightweight and easy to learn programming language. In this section, we will cover the basic structure of a LUA script, as well as the different data types available and how to manipulate them.",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/lua-modding/lua-basics.mdx",sourceDirName:"lua-modding",slug:"/lua-modding/lua-basics",permalink:"/ru/docs/lua-modding/lua-basics",draft:!1,unlisted:!1,editUrl:"https://github.com/PalworldModding/Docs/docs/lua-modding/lua-basics.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"DataTables",permalink:"/ru/docs/lua-modding/datatables"},next:{title:"Using Blueprints with Lua",permalink:"/ru/docs/lua-modding/blueprints-with-lua"}},o={},c=[{value:"Script Structure",id:"script-structure",level:2},{value:"Statements",id:"statements",level:3},{value:"Comments",id:"comments",level:3},{value:"Functions",id:"functions",level:3},{value:"Data Types",id:"data-types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"Strings",id:"strings",level:3},{value:"Booleans",id:"booleans",level:3},{value:"Tables Tables and Metatables",id:"tables-tables-and-metatables",level:3},{value:"Manipulating Data",id:"manipulating-data",level:3},{value:"Variables and Functions",id:"variables-and-functions",level:2},{value:"Variables",id:"variables",level:3},{value:"Functions",id:"functions-1",level:3},{value:"Flow Control",id:"flow-control",level:2},{value:"If-Else Condition",id:"if-else-condition",level:3},{value:"Elseif Condition",id:"elseif-condition",level:3},{value:"While Loop",id:"while-loop",level:3},{value:"Repeat Until",id:"repeat-until",level:3},{value:"Tables and Metatables",id:"tables-and-metatables",level:2},{value:"Creating a Table",id:"creating-a-table",level:3},{value:"Accessing Table Elements",id:"accessing-table-elements",level:3},{value:"Metatables",id:"metatables",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"lua-basics",children:"Lua Basics"}),"\n",(0,t.jsx)(n.h1,{id:"basic-syntax-and-data-types",children:"Basic Syntax and Data Types"}),"\n",(0,t.jsx)(n.p,{children:"LUA is a lightweight and easy to learn programming language. In this section, we will cover the basic structure of a LUA script, as well as the different data types available and how to manipulate them."}),"\n",(0,t.jsx)(n.h2,{id:"script-structure",children:"Script Structure"}),"\n",(0,t.jsxs)(n.p,{children:["A LUA script is a plain text file with the ",(0,t.jsx)(n.code,{children:".lua"})," file extension. The script is executed from top to bottom, and it can contain a combination of statements, comments, and functions."]}),"\n",(0,t.jsx)(n.h3,{id:"statements",children:"Statements"}),"\n",(0,t.jsx)(n.p,{children:"Statements are commands that perform a specific action, such as assigning a value to a variable or calling a function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- This is a statement that assigns the value "hello" to the variable "greeting"\r\ngreeting = "hello"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"comments",children:"Comments"}),"\n",(0,t.jsxs)(n.p,{children:["Comments are used to add notes or explanations to the code and are ignored by the interpreter. In LUA, comments are created using double dashes (",(0,t.jsx)(n.code,{children:"--"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- This is a comment and will be ignored by the interpreter\r\ngreeting = "hello"\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"It's a great practice to leave comments around your code to explain what it does, for not only yourself but others."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"    -- Function to check pal's health\r\n    function checkPalHealth()\r\n        -- Get pal using getPal function\r\n        local pal = getPal(\"anubis\")\r\n        -- Return pal's health\r\n        return pal.health\r\n    end\n"})}),"\n",(0,t.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Functions are blocks of code that perform a specific task and can be reused throughout the script. Functions are defined using the ",(0,t.jsx)(n.code,{children:"function"})," keyword and are called using their name followed by parentheses (",(0,t.jsx)(n.code,{children:"()"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- This is a function that prints a greeting message\r\nfunction sayHello()\r\n    print("Hello!")\r\nend\r\n\r\n-- This is how the function is called\r\nsayHello()\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(n.p,{children:"LUA supports several data types, including:"}),"\n",(0,t.jsx)(n.h3,{id:"numbers",children:"Numbers"}),"\n",(0,t.jsx)(n.p,{children:"Numbers are used to represent numeric values and can be integers or floating-point numbers."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- This is a number\r\nage = 25\r\n\r\n-- This is also a number, but with a decimal point\r\nprice = 9.99\n"})}),"\n",(0,t.jsx)(n.h3,{id:"strings",children:"Strings"}),"\n",(0,t.jsx)(n.p,{children:"Strings are used to represent text and are enclosed in double or single quotes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- This is a string\r\nname = \"John\"\r\n\r\n-- This is also a string\r\naddress = '123 Main St'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"booleans",children:"Booleans"}),"\n",(0,t.jsx)(n.p,{children:"Booleans are used to represent true or false values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- This is a boolean\r\nisValid = true\r\n\r\n-- This is also a boolean\r\nisCompleted = false\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"tables-tables-and-metatables",children:["Tables ",(0,t.jsx)(n.a,{href:"./lua-basics#tables-and-metatables",children:"Tables and Metatables"})]}),"\n",(0,t.jsx)(n.p,{children:"Tables are used to store collections of values and can be used as arrays or dictionaries."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- This is a table\r\nmyTable = {1, 2, 3}\r\n\r\n-- This is also a table, but with named keys\r\nmyDictionary = {name = "John", age = 25}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"manipulating-data",children:"Manipulating Data"}),"\n",(0,t.jsx)(n.p,{children:"LUA provides several built-in functions and operators for manipulating data, such as concatenating strings, performing mathematical operations, and more."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Concatenating strings\r\ngreeting = "Hello, " .. "world!"\r\n\r\n-- Performing mathematical operations\r\nsum = 2 + 2\r\ndifference = 10 - 5\r\nproduct = 2 * 3\r\nquotient = 10 / 2\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"This is just a small introduction to LUA basic syntax and data types, there is much more to learn and explore, such as control structures, libraries and modules, OOP and more."})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Please keep in mind that the code snippets will not run as it is and it is intended to be used as an example and reference."})}),"\n",(0,t.jsx)(n.h2,{id:"variables-and-functions",children:"Variables and Functions"}),"\n",(0,t.jsx)(n.p,{children:"In LUA, variables are used to store and manipulate data, and functions are used to organize and reuse code."}),"\n",(0,t.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,t.jsxs)(n.p,{children:["In LUA, variables are declared using the ",(0,t.jsx)(n.code,{children:"local"})," keyword or without it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Declaring a variable\r\nlocal x = 5\r\n\r\n-- Declaring a variable without the `local` keyword\r\ny = 10\n"})}),"\n",(0,t.jsx)(n.p,{children:"It's recommended to use the local keyword when declaring a variable, as it limits the scope of the variable to the current function or file, and prevents accidental global variable assignments."}),"\n",(0,t.jsx)(n.p,{children:"LUA supports several data types, including numbers, strings, booleans, and tables."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Declaring a number variable\r\nlocal age = 25\r\n\r\n-- Declaring a string variable\r\nlocal name = "John"\r\n\r\n-- Declaring a boolean variable\r\nlocal isValid = true\r\n\r\n-- Declaring a table variable\r\nlocal myTable = {1, 2, 3}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"functions-1",children:"Functions"}),"\n",(0,t.jsx)(n.p,{children:"In LUA, functions are declared using the function keyword and can be called using the function name followed by parentheses."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Declaring a function\r\nfunction sayHello()\r\n    print("Hello!")\r\nend\r\n\r\n-- Calling a function\r\nsayHello()\n'})}),"\n",(0,t.jsx)(n.p,{children:"Functions can also take parameters and return values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Declaring a function with parameters\r\nfunction add(x, y)\r\n    return x + y\r\nend\r\n\r\n-- Calling a function with arguments\r\nresult = add(5, 10)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Functions can be stored in variables and passed as arguments to other functions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Storing a function in a variable\r\nlocal myFunction = function()\r\n    print("Hello!")\r\nend\r\n\r\n-- Passing a function as an argument\r\notherFunction(myFunction)\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is just a small introduction to variables and functions in LUA, there is much more to learn and explore, such as closures, recursion, and more."}),"\n",(0,t.jsx)(n.h2,{id:"flow-control",children:"Flow Control"}),"\n",(0,t.jsxs)(n.p,{children:["In LUA, flow control statements are used to control the flow of execution of a script. These include ",(0,t.jsx)(n.code,{children:"if"}),", ",(0,t.jsx)(n.code,{children:"else"}),", ",(0,t.jsx)(n.code,{children:"elseif"}),", ",(0,t.jsx)(n.code,{children:"for"}),", ",(0,t.jsx)(n.code,{children:"while"}),", and ",(0,t.jsx)(n.code,{children:"repeat"})," statements."]}),"\n",(0,t.jsx)(n.h3,{id:"if-else-condition",children:"If-Else Condition"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"if"})," statement is used to check if a certain condition is true and execute a block of code if it is. The ",(0,t.jsx)(n.code,{children:"else"})," statement is used as an alternative if the condition is not true."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- If-else statement\r\nlocal x = 5\r\nif x > 10 then\r\n    print("x is greater than 10")\r\nelse\r\n    print("x is less than or equal to 10")\r\nend`\n'})}),"\n",(0,t.jsx)(n.h3,{id:"elseif-condition",children:"Elseif Condition"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"elseif"})," statement is used to check multiple conditions. If the first condition is not true, the script will check the next one, and so on, until a true condition is found or the end of the script is reached."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Elseif statement\r\nlocal x = 5\r\nif x > 10 then\r\n    print("x is greater than 10")\r\nelseif x < 0 then\r\n    print("x is less than 0")\r\nelse\r\n    print("x is between 0 and 10")\r\nend`\n'})}),"\n",(0,t.jsxs)(n.p,{children:["##3 For Loop\r\nThe ",(0,t.jsx)(n.code,{children:"for"})," loop is used to iterate over a range of numbers or elements in an array or table. The loop variable is declared and initialized before the loop, and the loop will continue until the end condition is met."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- For loop\r\nfor i = 1, 10 do\r\n    print(i)\r\nend`\n"})}),"\n",(0,t.jsx)(n.h3,{id:"while-loop",children:"While Loop"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"while"})," loop is used to execute a block of code repeatedly as long as a certain condition is true."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- While loop\r\nlocal x = 5\r\nwhile x > 0 do\r\n    print(x)\r\n    x = x - 1\r\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"repeat-until",children:"Repeat Until"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"repeat"})," statement is used to execute a block of code repeatedly until a certain condition is met. The code block is executed at least once before the condition is checked."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"-- Repeat until\r\nlocal x = 5\r\nrepeat\r\n    x = x - 1\r\n    print(x)\r\nuntil x == 0\n"})}),"\n",(0,t.jsx)(n.p,{children:"The above code snippet will execute the loop until x is equal to 0, and the value of x will be decremented in each iteration."}),"\n",(0,t.jsx)(n.h2,{id:"tables-and-metatables",children:"Tables and Metatables"}),"\n",(0,t.jsx)(n.p,{children:"In Lua, tables are a fundamental data structure used to store and organize data. A table is a collection of key-value pairs, where each key is unique within the table. Tables can be used as arrays, dictionaries, objects, or a combination of these."}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-table",children:"Creating a Table"}),"\n",(0,t.jsxs)(n.p,{children:["To create a table, you can use curly braces ",(0,t.jsx)(n.code,{children:"{}"})," and separate the key-value pairs with commas. Keys can be either numbers or strings, and values can be any Lua data type, including other tables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Creating a table\r\nlocal myTable = {\r\n    ["name"] = "John",\r\n    ["age"] = 25,\r\n    [3] = "hello",\r\n    -- Tables can be used as values of other tables\r\n    ["nestedTable"] = {\r\n        ["key"] = "value"\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:'In this example, the table myTable has four key-value pairs. The first key "name" has the value "John", the second key "age" has the value 25, the third key 3 has the value "hello", and the fourth key "nestedTable" has another table as its value.'}),"\n",(0,t.jsx)(n.h3,{id:"accessing-table-elements",children:"Accessing Table Elements"}),"\n",(0,t.jsxs)(n.p,{children:["You can access the elements of a table using the table name followed by the key in square brackets ",(0,t.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Accessing table elements\r\nprint(myTable["name"]) -- Output: John\r\nprint(myTable.name)     -- Output: John\r\nprint(myTable[3])      -- Output: hello\r\nprint(myTable.nestedTable.key) -- Output: value\n'})}),"\n",(0,t.jsx)(n.h3,{id:"metatables",children:"Metatables"}),"\n",(0,t.jsx)(n.p,{children:"Metatables are used to define the behavior of a table when certain operations are performed on it. A metatable is a table that can be set as the metatable of another table. The metatable contains metamethods, which are functions that define the behavior of the table when certain operations are performed on it."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- Creating a metatable\r\nlocal myMetatable = {\r\n    __add = function(table1, table2)\r\n        local newTable = {}\r\n        for k, v in pairs(table1) do\r\n            newTable[k] = v\r\n        end\r\n        for k, v in pairs(table2) do\r\n            newTable[k] = v\r\n        end\r\n        return newTable\r\n    end\r\n}\r\n\r\n-- Setting the metatable\r\nsetmetatable(myTable, myMetatable)\r\n\r\n-- Using the metamethod\r\nlocal myOtherTable = {\r\n    ["city"] = "New York",\r\n    ["country"] = "USA"\r\n}\r\nlocal myCombinedTable = myTable + myOtherTable\r\nprint(myCombinedTable.name)     -- Output: John\r\nprint(myCombinedTable.city)     -- Output: New York\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the ",(0,t.jsx)(n.code,{children:"__add"})," metamethod is defined to combine two tables into a new table. The setmetatable function is used to set ",(0,t.jsx)(n.code,{children:"myMetatable"})," as the metatable of myTable. Finally, the ",(0,t.jsx)(n.code,{children:"+"})," operator is used to combine ",(0,t.jsx)(n.code,{children:"myTable"})," and ",(0,t.jsx)(n.code,{children:"myOtherTable"})," into ",(0,t.jsx)(n.code,{children:"myCombinedTable"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>s});var t=a(67294);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);